/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat.models;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Joela
 */
public class ServerWindow extends javax.swing.JFrame {
ServerSocket serverSocket;
    /**
     * Creates new form ServerWindow
     */
    public ServerWindow() {
        initComponents();
        this.setResizable(false);
        stopBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        serverArea = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        serverLabelStatus = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setBackground(new java.awt.Color(255, 153, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Chat Application Server");
        jLabel2.setOpaque(true);

        serverLabelStatus.setBackground(new java.awt.Color(255, 102, 0));
        serverLabelStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        serverLabelStatus.setForeground(new java.awt.Color(0, 51, 51));
        serverLabelStatus.setText("THE SERVER IS CURRENTLY OFFLINE");
        serverLabelStatus.setOpaque(true);

        startBtn.setBackground(new java.awt.Color(51, 0, 51));
        startBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startBtn.setForeground(new java.awt.Color(153, 102, 255));
        startBtn.setText("START SERVER");
        startBtn.setBorder(null);
        startBtn.setFocusable(false);
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        stopBtn.setBackground(new java.awt.Color(153, 0, 51));
        stopBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        stopBtn.setForeground(new java.awt.Color(153, 153, 255));
        stopBtn.setText("STOP SERVER");
        stopBtn.setBorder(null);
        stopBtn.setFocusable(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(serverArea)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverArea, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        if (serverSocket == null) {
            ServerSide serverSide = new ServerSide();
            Thread serverListener = new Thread(serverSide);
            serverListener.start();
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        if (serverSocket != null) {
            try {
                serverSocket.close();
                serverSocket = null;
                serverLabelStatus.setText("THE SERVER IS CURRENTLY OFFLINE");
                stopBtn.setEnabled(false);
                startBtn.setEnabled(true);
            } catch (IOException ex) {
                ///
            }
        }
    }//GEN-LAST:event_stopBtnActionPerformed
private class ServerSide implements Runnable {

        private final ArrayList<ServerClientHandler> clientsList = new ArrayList<>();

        public ServerSide() {

        }

        @Override
        public void run() {
            Socket client;
            try {
                serverSocket = new ServerSocket(ConnectionUtility.PORT);
                if (serverSocket != null) {
                    serverLabelStatus.setText("THE SERVER IS CURRENTLY RUNNING...");
                    stopBtn.setEnabled(true);
                    startBtn.setEnabled(false);
                }
                try {
                    while (true) {
                        client = serverSocket.accept();
                        ServerClientHandler clientHanlder = new ServerClientHandler(client, clientsList);
                        clientsList.add(clientHanlder);
                        Thread clientListener = new Thread(clientHanlder);
                        clientListener.start();
                    }
                } catch (IOException ex) {
                    client = null;
                } catch (Exception e) {
                    client = null;
                }
            } catch (IOException e) {
                ///
            }

        }

    }

    private class ServerClientHandler implements Runnable {

        private ArrayList<ServerClientHandler> clients;
        private Socket client;
        private BufferedReader IN;
        private PrintWriter OUT;
        private String username;

        public ServerClientHandler(Socket client, ArrayList<ServerClientHandler> clients) {
            try {
                this.client = client;
                this.clients = clients;
                IN = new BufferedReader(new InputStreamReader(client.getInputStream()));
                OUT = new PrintWriter(client.getOutputStream(), true);
            } catch (IOException ex) {
                Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            String messageSent;
            try {
                while (true) {
                    messageSent = IN.readLine();
                    if (messageSent.startsWith("@connectuser@")) {
                        String newUser = messageSent.substring(13).trim();
                        this.username = newUser;
                        serverArea.setText(serverArea.getText() + "\n\n" + this.username + " has connected");
                    } else if (messageSent.startsWith("@new@")) {
                        int indexOfAt = messageSent.indexOf("@", 5);
                        if (indexOfAt > -1) {
                            String foundUser = messageSent.substring(5, indexOfAt).trim();
                            String reciever_msg = messageSent.substring(indexOfAt + 1);
                            reciever_msg = "@" + this.username + "@" + reciever_msg;
                            boolean found = false;
                            for (ServerClientHandler cl : clients) {
                                if (cl.username.equals(foundUser)) {
                                    cl.OUT.println(reciever_msg);
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                OUT.println("server_user_not_found");
                            } else {
                                OUT.println("server_user_found@" + foundUser);
                            }
                        }
                    } else {
                        int indexOfAt = messageSent.indexOf("@", 1);
                        String reciever = messageSent.substring(1, indexOfAt);
                        String reciever_msg = messageSent.substring(indexOfAt + 1);
                        reciever_msg = "@" + this.username + "@" + reciever_msg;
                        for (ServerClientHandler cl : clients) {
                            if (cl.username.equals(reciever)) {
                                cl.OUT.println(reciever_msg);
                                break;
                            }
                        }
                    }
                }
            } catch (IOException e) {
                //
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextPane serverArea;
    private javax.swing.JLabel serverLabelStatus;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables
}
